#ifndef __INC_METIN_II_LENGTH_H__
#define __INC_METIN_II_LENGTH_H__

#include "defines.h"

#define WORD_MAX 0xffff
enum EMisc
{
	MAX_HOST_LENGTH			= 15,
	IP_ADDRESS_LENGTH		= 15,
	LOGIN_MAX_LEN			= 30,
	PASSWD_MAX_LEN			= 16,
#ifdef __PLAYER_PER_ACCOUNT5__
	PLAYER_PER_ACCOUNT		= 5,
#else
	PLAYER_PER_ACCOUNT		= 4,
#endif
	MAP_ALLOW_LIMIT 		= 64,
	ACCOUNT_STATUS_MAX_LEN	= 8,
	CHARACTER_NAME_MAX_LEN	= 24,
	SHOP_SIGN_MAX_LEN		= 32,

	INVENTORY_PAGE_COLUMN	= 5, // 5 (default)
	INVENTORY_PAGE_ROW		= 9, // 9 (default)
	INVENTORY_PAGE_SIZE		= INVENTORY_PAGE_COLUMN*INVENTORY_PAGE_ROW,
	INVENTORY_PAGE_COUNT	= 4, // 2 (default)
	INVENTORY_MAX_NUM		= INVENTORY_PAGE_SIZE*INVENTORY_PAGE_COUNT, // 90 (default)

	ABILITY_MAX_NUM			= 50,
	EMPIRE_MAX_NUM			= 4,
	BANWORD_MAX_LEN			= 24,
	SMS_MAX_LEN				= 80,
	SOCIAL_ID_MAX_LEN		= 18,
	GUILD_NAME_MAX_LEN		= 12,

	SHOP_PAGE_COLUMN		= 5,
	SHOP_PAGE_ROW			= 9,
	SHOP_PAGE_SIZE			= SHOP_PAGE_COLUMN * SHOP_PAGE_ROW,
	SHOP_PAGE_COUNT			= 3,
	SHOP_MAX_NUM			= SHOP_PAGE_SIZE * SHOP_PAGE_COUNT,

	EXCHANGE_PAGE_COLUMN	= 4,
	EXCHANGE_PAGE_ROW		= 3,
	EXCHANGE_PAGE_SIZE		= EXCHANGE_PAGE_COLUMN * EXCHANGE_PAGE_ROW,
	EXCHANGE_PAGE_COUNT		= 4,
	EXCHANGE_MAX_NUM		= EXCHANGE_PAGE_SIZE * EXCHANGE_PAGE_COUNT,

	SAFEBOX_PAGE_COLUMN		= 5,
	SAFEBOX_PAGE_ROW		= 9,
	SAFEBOX_PAGE_SIZE		= SAFEBOX_PAGE_COLUMN * SAFEBOX_PAGE_ROW,
	SAFEBOX_PAGE_COUNT		= 5,
	SAFEBOX_MAX_NUM			= SAFEBOX_PAGE_SIZE * SAFEBOX_PAGE_COUNT,

	CHAT_MAX_LEN			= 512,

	QUICKSLOT_MAX_NUM		= 36,

	JOURNAL_MAX_NUM			= 2,

#ifdef __MAILBOX__
	QUERY_MAX_LEN 			= 8192 * 4,
#else
	QUERY_MAX_LEN			= 8192,
#endif

	FILE_MAX_LEN			= 128,

	PLAYER_EXP_TABLE_MAX	= 120,
	PLAYER_MAX_LEVEL_CONST	= 250,

	GUILD_MAX_LEVEL			= 20,
	MOB_MAX_LEVEL			= 100,

	ATTRIBUTE_MAX_VALUE		= 20,
	CHARACTER_PATH_MAX_NUM	= 64,
	SKILL_MAX_NUM			= 255,
	SKILLBOOK_DELAY_MIN		= 64800,
	SKILLBOOK_DELAY_MAX		= 108000,
	SKILL_MAX_LEVEL			= 40,

	APPLY_NAME_MAX_LEN		= 32,
	EVENT_FLAG_NAME_MAX_LEN = 32,

	MOB_SKILL_MAX_NUM		= 5,

    POINT_MAX_NUM = 255,
	DRAGON_SOUL_BOX_SIZE = 32,
	DRAGON_SOUL_BOX_COLUMN_NUM = 8,
	DRAGON_SOUL_BOX_ROW_NUM = DRAGON_SOUL_BOX_SIZE / DRAGON_SOUL_BOX_COLUMN_NUM,
	DRAGON_SOUL_REFINE_GRID_SIZE = 15,
	MAX_AMOUNT_OF_MALL_BONUS	= 20,

	GOLD_MAX = 2000000000,
#ifdef __CHEQUE__
	CHEQUE_MAX = 1000,
#endif
#ifdef __BATTLE_FIELD__
	BATTLE_POINT_MAX = 2000000000,
#endif

	BELT_INVENTORY_SLOT_WIDTH = 4,
	BELT_INVENTORY_SLOT_HEIGHT= 4,

	BELT_INVENTORY_SLOT_COUNT = BELT_INVENTORY_SLOT_WIDTH * BELT_INVENTORY_SLOT_HEIGHT,

#ifdef __NEW_STORAGE__
	STORAGE_INVENTORY_PAGE_COLUMN	= 5,
	STORAGE_INVENTORY_PAGE_ROW		= 9,
	STORAGE_INVENTORY_PAGE_SIZE = STORAGE_INVENTORY_PAGE_COLUMN * STORAGE_INVENTORY_PAGE_ROW,
	STORAGE_INVENTORY_PAGE_COUNT = 5,
	STORAGE_INVENTORY_MAX_NUM = STORAGE_INVENTORY_PAGE_SIZE * STORAGE_INVENTORY_PAGE_COUNT, //x*y * page count
	STORAGE_INVENTORY_COUNT = 5,
#endif

#ifdef __GEM__
	GEM_SLOTS_MAX_NUM 			= 9,
	GEM_REFRESH_ITEM_VNUM 		= 39063,
	GEM_UNLOCK_ITEM_VNUM 		= 39064,
	GEM_GLIMMERSTONE_VNUM		= 50926,
	GEM_REFRESH_PULSE			= 5,
	GEM_MAX 					= 1000000,
#endif

#ifdef __EXTEND_INVEN__
	EXTEND_INVEN_UPGRADE_ITEM_VNUM = 72319,
	EX_INVENTORY_PAGE_START = 3,
#endif

#ifdef __MINI_GAME_RUMI__
	MINI_GAME_RUMI_HAND_SLOTS_MAX_NUM = 5,
	MINI_GAME_RUMI_FIELD_SLOTS_MAX_NUM = 3,
	MINI_GAME_RUMI_DECK_CARDS_MAX_NUM = 24,
#endif

#ifdef __12ZI__
	BEAD_MAX = 99,
#endif

#ifdef __MINI_GAME_FISH__
	FISH_EVENT_SLOTS_NUM = 24,
	ITEM_FISH_EVENT_BOX = 25106,
	ITEM_FISH_EVENT_BOX_SPECIAL	= 25107,
#endif

#ifdef __MAILBOX__
	MAIL_SLOT_MAX_NUM = 18,
	POST_TIME_OUT_DELETE = 2,
	MAIL_MESSAGE_MAX_LEN = 100,
	MAIL_TITLE_MAX_LEN = 25,
#endif

#ifdef __EXPRESSING_EMOTION__
	SPECIAL_EMOTION_MAX = 12,
#endif
};

#ifdef __MINI_GAME__
enum EMiniGameTypes
{
#ifdef __MINI_GAME_RUMI__
	MINIGAME_TYPE_RUMI,
#endif
#if defined(__MINI_GAME_ATTENDANCE__) || defined(__MINI_GAME_MONSTERBACK__)
	MINIGAME_ATTENDANCE,
	MINIGAME_MONSTERBACK,
#endif
#ifdef __MINI_GAME_FISH__
	MINIGAME_FISH,
#endif
	MINIGAME_YUTNORI,
	MINIGAME_CATCHKING,
	MINIGAME_TYPE_MAX,
};
#endif

#ifdef __MINI_GAME_FISH__
enum EFishEventInfo
{
	FISH_EVENT_SHAPE_NONE,
	FISH_EVENT_SHAPE_1,
	FISH_EVENT_SHAPE_2,
	FISH_EVENT_SHAPE_3,
	FISH_EVENT_SHAPE_4,
	FISH_EVENT_SHAPE_5,
	FISH_EVENT_SHAPE_6,
	FISH_EVENT_SHAPE_7,
	FISH_EVENT_SHAPE_MAX_NUM,
};
#endif

#if defined(__MINI_GAME_ATTENDANCE__) || defined(__MINI_GAME_MONSTERBACK__)
enum EAttenDanceDataTypes
{
	ATTENDANCE_DATA_TYPE_DAY,
	ATTENDANCE_DATA_TYPE_MISSION_CLEAR,
	ATTENDANCE_DATA_TYPE_GET_REWARD,
	ATTENDANCE_DATA_TYPE_SHOW_MAX,
};
#endif

#ifdef __MINI_GAME_RUMI__
enum EMiniGameRumiSlotPos
{
	MINI_GAME_RUMI_NONE_POS,
	MINI_GAME_RUMI_DECK_CARD,
	MINI_GAME_RUMI_HAND_CARD,
	MINI_GAME_RUMI_FIELD_CARD,
	MINI_GAME_RUMI_CARD_POS_MAX,
};
#endif

#ifdef __CHANGELOOK__
enum EChangeLookInfo
{
#ifdef __CHANGE_LOOK_ITEM__
	CL_WINDOW_MAX_MATERIALS = 3,
#else
	CL_WINDOW_MAX_MATERIALS = 2,
#endif
	CL_CLEAN_ATTR_VALUE0 = 8,
	CL_TRANSMUTATION_PRICE = 50000000,
};
#endif

enum EShopPriceType
{
	SHOP_PRICE_GOLD,
#ifdef __CHEQUE__
	SHOP_PRICE_CHEQUE,
#endif
#ifdef __BATTLE_FIELD__
	SHOP_PRICE_BATTLE_POINT,
#endif
	SHOP_PRICE_MAX_NUM
};

enum EPetSubTypes
{
	PET_EGG,
	PET_UPBRINGING,
	PET_BAG,
	PET_FEEDSTUFF,
	PET_SKILL,
	PET_SKILL_DEL_BOOK,
	PET_NAME_CHANGE,
	PET_EXPFOOD,
	PET_SKILL_ALL_DEL_BOOK,
	PET_EXPFOOD_PER,
	PET_ATTR_CHANGE,
	PET_ATTR_CHANGE_ITEMVNUM,
	PET_PAY
};

enum EMediumSubTypes
{
	MEDIUM_MOVE_COSTUME_ATTR,
	MEDIUM_MOVE_COSTUME_ACCE_ATTR
};

enum EWearPositions
{
	WEAR_BODY,				// 0
	WEAR_HEAD,  			// 1
	WEAR_FOOTS,  			// 2
	WEAR_WRIST,  			// 3
	WEAR_WEAPON,  			// 4
	WEAR_NECK,  			// 5
	WEAR_EAR,  				// 6
	WEAR_UNIQUE1,  			// 7
	WEAR_UNIQUE2,			// 8
	WEAR_ARROW,				// 9
	WEAR_SHIELD,			// 10
    WEAR_ABILITY1,			// 11
    WEAR_ABILITY2,			// 12
    WEAR_ABILITY3,			// 13
    WEAR_ABILITY4,  		// 14
    WEAR_ABILITY5,  		// 15
    WEAR_ABILITY6,  		// 16
    WEAR_ABILITY7,  		// 17
    WEAR_ABILITY8,  		// 18
	WEAR_RING1,				// 19
	WEAR_RING2,				// 20
	WEAR_BELT,				// 21
#ifdef __PENDANT__
	WEAR_PENDANT,			// 22
#endif

#ifdef __COSTUME_PET__
	WEAR_PET,				// 23
#endif

	WEAR_COSTUME_BODY,		// 24
	WEAR_COSTUME_HAIR,		// 25

#ifdef __COSTUME_MOUNT__
	WEAR_COSTUME_MOUNT, 	// 26
#endif

#ifdef __COSTUME_ACCE__
	WEAR_COSTUME_ACCE,		// 27
#endif

#ifdef __COSTUME_WEAPON__
	WEAR_COSTUME_WEAPON,	// 28
#endif

#ifdef __COSTUME_EFFECT__
	WEAR_COSTUME_EFFECT_BODY,	// 29
	WEAR_COSTUME_EFFECT_WEAPON,	// 30
#endif

	WEAR_MAX_NUM,
};

enum EDragonSoulDeckType
{
	DRAGON_SOUL_DECK_0,
	DRAGON_SOUL_DECK_1,
	DRAGON_SOUL_DECK_MAX_NUM = 2,

	DRAGON_SOUL_DECK_RESERVED_MAX_NUM = 3,
};

enum ESex
{
	SEX_MALE,
	SEX_FEMALE
};

enum EDirection
{
	DIR_NORTH,
	DIR_NORTHEAST,
	DIR_EAST,
	DIR_SOUTHEAST,
	DIR_SOUTH,
	DIR_SOUTHWEST,
	DIR_WEST,
	DIR_NORTHWEST,
	DIR_MAX_NUM
};

#define ABILITY_MAX_LEVEL	10  /* 기술 최대 레벨 */

enum EAbilityDifficulty
{
	DIFFICULTY_EASY,
	DIFFICULTY_NORMAL,
	DIFFICULTY_HARD,
	DIFFICULTY_VERY_HARD,
	DIFFICULTY_NUM_TYPES
};

enum EAbilityCategory
{
	CATEGORY_PHYSICAL,
	CATEGORY_MENTAL,
	CATEGORY_ATTRIBUTE,
	CATEGORY_NUM_TYPES
};

enum EJobs
{
	JOB_WARRIOR,
	JOB_ASSASSIN,
	JOB_SURA,
	JOB_SHAMAN,
#ifdef __WOLFMAN__
	JOB_WOLFMAN,
#endif
	JOB_MAX_NUM
};

enum ESkillGroups
{
	SKILL_GROUP_MAX_NUM = 2,
};

enum ERaceFlags
{
	RACE_FLAG_ANIMAL	= (1 << 0),
	RACE_FLAG_UNDEAD	= (1 << 1),
	RACE_FLAG_DEVIL		= (1 << 2),
	RACE_FLAG_HUMAN		= (1 << 3),
	RACE_FLAG_ORC		= (1 << 4),
	RACE_FLAG_MILGYO	= (1 << 5),
	RACE_FLAG_INSECT	= (1 << 6),
	RACE_FLAG_FIRE		= (1 << 7),
	RACE_FLAG_ICE		= (1 << 8),
	RACE_FLAG_DESERT	= (1 << 9),
	RACE_FLAG_TREE		= (1 << 10),
	RACE_FLAG_ATT_ELEC	= (1 << 11),
	RACE_FLAG_ATT_FIRE	= (1 << 12),
	RACE_FLAG_ATT_ICE	= (1 << 13),
	RACE_FLAG_ATT_WIND	= (1 << 14),
	RACE_FLAG_ATT_EARTH	= (1 << 15),
	RACE_FLAG_ATT_DARK	= (1 << 16),
	RACE_FLAG_DECO		= (1 << 17),
	RACE_FLAG_HIDE		= (1 << 18),
	RACE_FLAG_ATT_CZ	= (1 << 19),
};

enum EMobAttFlags
{
	ATT_ELEC,
	ATT_FIRE,
	ATT_ICE,
	ATT_WIND,
	ATT_EARTH,
	ATT_DARK,
	ATT_MAX_NUM
};

enum ELoads
{
	LOAD_NONE,
	LOAD_LIGHT,
	LOAD_NORMAL,
	LOAD_HEAVY,
	LOAD_MASSIVE
};

enum
{
	QUICKSLOT_TYPE_NONE,
	QUICKSLOT_TYPE_ITEM,
	QUICKSLOT_TYPE_SKILL,
	QUICKSLOT_TYPE_COMMAND,
	QUICKSLOT_TYPE_MAX_NUM,
};

enum EParts
{
	PART_MAIN,
	PART_WEAPON,
	PART_HEAD,
	PART_HAIR,
#ifdef __COSTUME_ACCE__
	PART_ACCE,
#endif
#ifdef __QUIVER__
	PART_ARROW_TYPE,
#endif
#ifdef __COSTUME_EFFECT__
	PART_BODY_EFFECT,
	PART_WEAPON_RIGHT_EFFECT,
	PART_WEAPON_LEFT_EFFECT,
#endif
	PART_MAX_NUM,
	PART_WEAPON_SUB,
};

enum EChatType
{
	CHAT_TYPE_TALKING,	/* 그냥 채팅 */
	CHAT_TYPE_INFO,	/* 정보 (아이템을 집었다, 경험치를 얻었다. 등) */
	CHAT_TYPE_NOTICE,	/* 공지사항 */
	CHAT_TYPE_PARTY,	/* 파티말 */
	CHAT_TYPE_GUILD,	/* 길드말 */
	CHAT_TYPE_COMMAND,	/* 일반 명령 */
	CHAT_TYPE_SHOUT,	/* 외치기 */
	CHAT_TYPE_WHISPER,
	CHAT_TYPE_BIG_NOTICE,
#ifdef __DICE__
	CHAT_TYPE_DICE_INFO,
#endif
#ifdef __12ZI__
	CHAT_TYPE_ZODIAC_NOTICE,
#endif
	CHAT_TYPE_MAX_NUM
};

enum EWhisperType
{
	WHISPER_TYPE_NORMAL		= 0,
	WHISPER_TYPE_NOT_EXIST		= 1,
	WHISPER_TYPE_TARGET_BLOCKED	= 2,
	WHISPER_TYPE_SENDER_BLOCKED	= 3,
	WHISPER_TYPE_ERROR		= 4,
	WHISPER_TYPE_GM			= 5,
	WHISPER_TYPE_SYSTEM		= 0xFF
};

enum ECharacterPosition
{
	POSITION_GENERAL,
	POSITION_BATTLE,
	POSITION_DYING,
	POSITION_SITTING_CHAIR,
	POSITION_SITTING_GROUND,
	POSITION_INTRO,
	POSITION_MAX_NUM
};

enum EGMLevels
{
	GM_PLAYER,
	GM_LOW_WIZARD,
	GM_WIZARD,
	GM_HIGH_WIZARD,
	GM_GOD,
	GM_IMPLEMENTOR,
	GM_DISABLE,
};

enum EMobRank
{
	MOB_RANK_PAWN,
	MOB_RANK_S_PAWN,
	MOB_RANK_KNIGHT,
	MOB_RANK_S_KNIGHT,
	MOB_RANK_BOSS,
	MOB_RANK_KING,
	MOB_RANK_MAX_NUM
};

enum ECharType
{
	CHAR_TYPE_MONSTER,
	CHAR_TYPE_NPC,
	CHAR_TYPE_STONE,
	CHAR_TYPE_WARP,
	CHAR_TYPE_DOOR,
	CHAR_TYPE_BUILDING,
	CHAR_TYPE_PC,
	CHAR_TYPE_POLYMORPH_PC,
	CHAR_TYPE_HORSE,
	CHAR_TYPE_GOTO,
	CHAR_TYPE_NEW_PET,
	CHAR_TYPE_PET
};

enum EBattleType
{
	BATTLE_TYPE_MELEE,
	BATTLE_TYPE_RANGE,
	BATTLE_TYPE_MAGIC,
	BATTLE_TYPE_SPECIAL,
	BATTLE_TYPE_POWER,
	BATTLE_TYPE_TANKER,
	BATTLE_TYPE_SUPER_POWER,
	BATTLE_TYPE_SUPER_TANKER,
	BATTLE_TYPE_MAX_NUM
};

enum EApplyTypes
{
	APPLY_NONE,			// 0
	APPLY_MAX_HP,		// 1
	APPLY_MAX_SP,		// 2
	APPLY_CON,			// 3
	APPLY_INT,			// 4
	APPLY_STR,			// 5
	APPLY_DEX,			// 6
	APPLY_ATT_SPEED,	// 7
	APPLY_MOV_SPEED,	// 8
	APPLY_CAST_SPEED,	// 9
	APPLY_HP_REGEN,		// 10
	APPLY_SP_REGEN,		// 11
	APPLY_POISON_PCT,	// 12
	APPLY_STUN_PCT,		// 13
	APPLY_SLOW_PCT,		// 14
	APPLY_CRITICAL_PCT,		// 15
	APPLY_PENETRATE_PCT,	// 16
	APPLY_ATTBONUS_HUMAN,	// 17
	APPLY_ATTBONUS_ANIMAL,	// 18
	APPLY_ATTBONUS_ORC,		// 19
	APPLY_ATTBONUS_MILGYO,	// 20
	APPLY_ATTBONUS_UNDEAD,	// 21
	APPLY_ATTBONUS_DEVIL,	// 22
	APPLY_STEAL_HP,			// 23
	APPLY_STEAL_SP,			// 24
	APPLY_MANA_BURN_PCT,	// 25
	APPLY_DAMAGE_SP_RECOVER,	// 26
	APPLY_BLOCK,			// 27
	APPLY_DODGE,			// 28
	APPLY_RESIST_SWORD,		// 29
	APPLY_RESIST_TWOHAND,	// 30
	APPLY_RESIST_DAGGER,	// 31
	APPLY_RESIST_BELL,		// 32
	APPLY_RESIST_FAN,		// 33
	APPLY_RESIST_BOW,		// 34
	APPLY_RESIST_FIRE,		// 35
	APPLY_RESIST_ELEC,		// 36
	APPLY_RESIST_MAGIC,		// 37
	APPLY_RESIST_WIND,		// 38
	APPLY_REFLECT_MELEE,	// 39
	APPLY_REFLECT_CURSE,	// 40
	APPLY_POISON_REDUCE,	// 41
	APPLY_KILL_SP_RECOVER,	// 42
	APPLY_EXP_DOUBLE_BONUS,	// 43
	APPLY_GOLD_DOUBLE_BONUS,	// 44
	APPLY_ITEM_DROP_BONUS,	// 45
	APPLY_POTION_BONUS,		// 46
	APPLY_KILL_HP_RECOVER,	// 47
	APPLY_IMMUNE_STUN,		// 48
	APPLY_IMMUNE_SLOW,		// 49
	APPLY_IMMUNE_FALL,		// 50
	APPLY_SKILL,			// 51
	APPLY_BOW_DISTANCE,		// 52
	APPLY_ATT_GRADE_BONUS,	// 53
	APPLY_DEF_GRADE_BONUS,	// 54
	APPLY_MAGIC_ATT_GRADE,	// 55
	APPLY_MAGIC_DEF_GRADE,	// 56
	APPLY_CURSE_PCT,		// 57
	APPLY_MAX_STAMINA,		// 58
	APPLY_ATTBONUS_WARRIOR,	// 59
	APPLY_ATTBONUS_ASSASSIN,	// 60
	APPLY_ATTBONUS_SURA,	// 61
	APPLY_ATTBONUS_SHAMAN,	// 62
	APPLY_ATTBONUS_MONSTER,	// 63
	APPLY_MALL_ATTBONUS,			// 64
	APPLY_MALL_DEFBONUS,			// 65
	APPLY_MALL_EXPBONUS,			// 66
	APPLY_MALL_ITEMBONUS,			// 67
	APPLY_MALL_GOLDBONUS,			// 68
	APPLY_MAX_HP_PCT,				// 69
	APPLY_MAX_SP_PCT,				// 70
	APPLY_SKILL_DAMAGE_BONUS,		// 71
	APPLY_NORMAL_HIT_DAMAGE_BONUS,	// 72
	APPLY_SKILL_DEFEND_BONUS,		// 73
	APPLY_NORMAL_HIT_DEFEND_BONUS,	// 74
	APPLY_PC_BANG_EXP_BONUS,		// 75
	APPLY_PC_BANG_DROP_BONUS,		// 76

	APPLY_EXTRACT_HP_PCT,			// 77

	APPLY_RESIST_WARRIOR,			// 78
	APPLY_RESIST_ASSASSIN,			// 79
	APPLY_RESIST_SURA,				// 80
	APPLY_RESIST_SHAMAN,			// 81
	APPLY_ENERGY,					// 82
	APPLY_DEF_GRADE,				// 83 
	APPLY_COSTUME_ATTR_BONUS,		// 84 
	APPLY_MAGIC_ATTBONUS_PER,		// 85
	APPLY_MELEE_MAGIC_ATT_BONUS_PER,			// 86

	APPLY_RESIST_ICE,		// 87 
	APPLY_RESIST_EARTH,		// 88 
	APPLY_RESIST_DARK,		// 89

	APPLY_ANTI_CRITICAL_PCT,	//90
	APPLY_ANTI_PENETRATE_PCT,	//91

#ifdef __WOLFMAN__
	APPLY_BLEEDING_REDUCE,		//92
	APPLY_BLEEDING_PCT,			//93
	APPLY_ATTBONUS_WOLFMAN,		//94
	APPLY_RESIST_WOLFMAN,		//95
	APPLY_RESIST_CLAW,			//96
#endif

	APPLY_ACCEDRAIN_RATE,	// 97
#ifdef __ANTI_RESIST_MAGIC_REDUCTION__
	APPLY_RESIST_MAGIC_REDUCTION, // 98
#endif

#ifdef __ELEMENT_ADD__
	APPLY_ENCHANT_ELECT,	// 99
	APPLY_ENCHANT_FIRE,	// 100
	APPLY_ENCHANT_ICE,	// 101
	APPLY_ENCHANT_WIND,	// 102
	APPLY_ENCHANT_EARTH,	// 103
	APPLY_ENCHANT_DARK,	// 104
	APPLY_ATTBONUS_CZ,	// 105
	APPLY_ATTBONUS_INSECT,	// 106
	APPLY_ATTBONUS_DESERT,	// 107
#endif

#ifdef __PENDANT__
	APPLY_ATTBONUS_SWORD,	// 108
	APPLY_ATTBONUS_TWOHAND,	// 109
	APPLY_ATTBONUS_DAGGER,	// 110
	APPLY_ATTBONUS_BELL,	// 111
	APPLY_ATTBONUS_FAN,	// 112
	APPLY_ATTBONUS_BOW,	// 113
	APPLY_ATTBONUS_CLAW,	// 114
	APPLY_RESIST_HUMAN,	// 115
	APPLY_RESIST_MOUNT_FALL,	// 116
#endif

	APPLY_NONAME,			// 117
	APPLY_MOUNT,			// 118

	MAX_APPLY_NUM,
};

enum EOnClickEvents
{
	ON_CLICK_NONE,
	ON_CLICK_SHOP,
	ON_CLICK_TALK,
	ON_CLICK_MAX_NUM
};

enum EOnIdleEvents
{
	ON_IDLE_NONE,
	ON_IDLE_GENERAL,
	ON_IDLE_MAX_NUM
};

enum EWindows
{
	RESERVED_WINDOW,
	INVENTORY,
	EQUIPMENT,
	SAFEBOX,
	MALL,
	DRAGON_SOUL_INVENTORY,
	BELT_INVENTORY,
	GROUND,	//7
#ifdef __NEW_STORAGE__
	UPGRADE_INVENTORY,
	BOOK_INVENTORY,
	STONE_INVENTORY,
	ATTR_INVENTORY,
	GIFTBOX_INVENTORY,
#endif
};

enum EMobSizes
{
	MOBSIZE_RESERVED,
	MOBSIZE_SMALL,
	MOBSIZE_MEDIUM,
	MOBSIZE_BIG
};

enum EAIFlags
{
	AIFLAG_AGGRESSIVE		= (1 << 0),
	AIFLAG_NOMOVE			= (1 << 1),
	AIFLAG_COWARD			= (1 << 2),
	AIFLAG_NOATTACKSHINSU	= (1 << 3),
	AIFLAG_NOATTACKJINNO	= (1 << 4),
	AIFLAG_NOATTACKCHUNJO	= (1 << 5),
	AIFLAG_ATTACKMOB 		= (1 << 6),
	AIFLAG_BERSERK			= (1 << 7),
	AIFLAG_STONESKIN		= (1 << 8),
	AIFLAG_GODSPEED			= (1 << 9),
	AIFLAG_DEATHBLOW		= (1 << 10),
	AIFLAG_REVIVE			= (1 << 11),
	AIFLAG_HEALER			= (1 << 12),
	AIFLAG_COUNT			= (1 << 13),
	AIFLAG_NORECOVERY		= (1 << 14),
	AIFLAG_REFLECT			= (1 << 15),
	AIFLAG_FALL				= (1 << 16),
	AIFLAG_VIT				= (1 << 17),
	AIFLAG_RATTSPEED		= (1 << 18),
	AIFLAG_RCASTSPEED		= (1 << 19),
	AIFLAG_RHP_REGEN		= (1 << 20),
	AIFLAG_TIMEVIT			= (1 << 21),
	AIFLAG_11				= (1 << 22),
};

enum EMobStatType
{
	MOB_STATTYPE_POWER,
	MOB_STATTYPE_TANKER,
	MOB_STATTYPE_SUPER_POWER,
	MOB_STATTYPE_SUPER_TANKER,
	MOB_STATTYPE_RANGE,
	MOB_STATTYPE_MAGIC,
	MOB_STATTYPE_MAX_NUM
};

enum EImmuneFlags
{
	IMMUNE_STUN		= (1 << 0),
	IMMUNE_SLOW		= (1 << 1),
	IMMUNE_FALL		= (1 << 2),
	IMMUNE_CURSE	= (1 << 3),
	IMMUNE_POISON	= (1 << 4),
	IMMUNE_TERROR	= (1 << 5),
	IMMUNE_REFLECT	= (1 << 6),
};

enum EMobEnchants
{
	MOB_ENCHANT_CURSE,
	MOB_ENCHANT_SLOW,
	MOB_ENCHANT_POISON,
	MOB_ENCHANT_STUN,
	MOB_ENCHANT_CRITICAL,
	MOB_ENCHANT_PENETRATE,
// #ifdef__WOLFMAN__
	// MOB_ENCHANT_BLEEDING,
// #endif
	MOB_ENCHANTS_MAX_NUM
};

enum EMobResists
{
	MOB_RESIST_SWORD,
	MOB_RESIST_TWOHAND,
	MOB_RESIST_DAGGER,
	MOB_RESIST_BELL,
	MOB_RESIST_FAN,
	MOB_RESIST_BOW,
#ifdef __WOLFMAN__
	MOB_RESIST_CLAW,
#endif
	MOB_RESIST_FIRE,
	MOB_RESIST_ELECT,
	MOB_RESIST_MAGIC,
	MOB_RESIST_WIND,
	MOB_RESIST_ICE,
	MOB_RESIST_EARTH,
	MOB_RESIST_DARK,
	MOB_RESIST_POISON,
#ifdef __WOLFMAN__
	MOB_RESIST_BLEEDING,
#endif
	MOB_RESIST_FIST,
	MOB_RESISTS_MAX_NUM
};

enum
{
	SKILL_ATTR_TYPE_NORMAL = 1,
	SKILL_ATTR_TYPE_MELEE,
	SKILL_ATTR_TYPE_RANGE,
	SKILL_ATTR_TYPE_MAGIC
		/*
		   SKILL_ATTR_TYPE_FIRE,
		   SKILL_ATTR_TYPE_ICE,
		   SKILL_ATTR_TYPE_ELEC,
		   SKILL_ATTR_TYPE_DARK,
		   */
};

enum
{
	SKILL_NORMAL,
	SKILL_MASTER,
	SKILL_GRAND_MASTER,
	SKILL_PERFECT_MASTER,
};

enum EGuildWarType
{
	GUILD_WAR_TYPE_FIELD,
	GUILD_WAR_TYPE_BATTLE,
	GUILD_WAR_TYPE_FLAG,
	GUILD_WAR_TYPE_MAX_NUM
};

enum EGuildWarState
{
	GUILD_WAR_NONE,
	GUILD_WAR_SEND_DECLARE,
	GUILD_WAR_REFUSE,
	GUILD_WAR_RECV_DECLARE,
	GUILD_WAR_WAIT_START,
	GUILD_WAR_CANCEL,
	GUILD_WAR_ON_WAR,
	GUILD_WAR_END,
	GUILD_WAR_OVER,
	GUILD_WAR_RESERVE,

	GUILD_WAR_DURATION = 30*60,
	GUILD_WAR_WIN_POINT = 1000,
	GUILD_WAR_LADDER_HALF_PENALTY_TIME = 12*60*60,
};

enum EAttributeSet
{
	ATTRIBUTE_SET_WEAPON,
	ATTRIBUTE_SET_BODY,
	ATTRIBUTE_SET_WRIST,
	ATTRIBUTE_SET_FOOTS,
	ATTRIBUTE_SET_NECK,
	ATTRIBUTE_SET_HEAD,
	ATTRIBUTE_SET_SHIELD,
	ATTRIBUTE_SET_EAR,
#ifdef __PENDANT__
	ATTRIBUTE_SET_PENDANT,
#endif
	ATTRIBUTE_SET_MAX_NUM
};

enum EPrivType
{
	PRIV_NONE,
	PRIV_ITEM_DROP,
	PRIV_GOLD_DROP,
	PRIV_GOLD10_DROP,
	PRIV_EXP_PCT,
	MAX_PRIV_NUM,
};

enum EMoneyLogType
{
	MONEY_LOG_RESERVED,
	MONEY_LOG_MONSTER,
	MONEY_LOG_SHOP,
	MONEY_LOG_REFINE,
	MONEY_LOG_QUEST,
	MONEY_LOG_GUILD,
	MONEY_LOG_MISC,
	MONEY_LOG_MONSTER_KILL,
	MONEY_LOG_DROP,
	MONEY_LOG_TYPE_MAX_NUM,
};

enum EPremiumTypes
{
	PREMIUM_EXP,
	PREMIUM_ITEM,
	PREMIUM_SAFEBOX,
	PREMIUM_AUTOLOOT,
	PREMIUM_FISH_MIND,
	PREMIUM_MARRIAGE_FAST,
	PREMIUM_GOLD,
	PREMIUM_MAX_NUM = 9
};

enum SPECIAL_EFFECT
{
	SE_NONE,

	SE_HPUP_RED,
	SE_SPUP_BLUE,
	SE_SPEEDUP_GREEN,
	SE_DXUP_PURPLE,
	SE_CRITICAL,
	SE_PENETRATE,
	SE_BLOCK,
	SE_DODGE,
	SE_CHINA_FIREWORK,
	SE_SPIN_TOP,
	SE_SUCCESS,
	SE_FAIL,
	SE_FR_SUCCESS,
	SE_LEVELUP_ON_14_FOR_GERMANY,
	SE_LEVELUP_UNDER_15_FOR_GERMANY,
	SE_PERCENT_DAMAGE1,
	SE_PERCENT_DAMAGE2,
	SE_PERCENT_DAMAGE3,

	SE_AUTO_HPUP,
	SE_AUTO_SPUP,

	SE_EQUIP_RAMADAN_RING,
	SE_EQUIP_HALLOWEEN_CANDY,
	SE_EQUIP_HAPPINESS_RING,
	SE_EQUIP_LOVE_PENDANT,
#ifdef __COSTUME_ACCE__
	SE_EFFECT_ACCE_SUCCEDED,
	SE_EFFECT_ACCE_EQUIP,
#endif
#ifdef __TEMPLE_OCHAO__
	SE_EFFECT_HEALER,
#endif
#ifdef __BATTLE_FIELD__
	SE_EFFECT_BATTLE_POTION,
#endif
#ifdef __12ZI__
	SE_EFFECT_SKILL,
#endif
};

#include "item_length.h"

enum EDragonSoulRefineWindowSize
{
	DRAGON_SOUL_REFINE_GRID_MAX = 15,
};

enum EMisc2
{
	DRAGON_SOUL_EQUIP_SLOT_START = INVENTORY_MAX_NUM + WEAR_MAX_NUM,
	DRAGON_SOUL_EQUIP_SLOT_END = DRAGON_SOUL_EQUIP_SLOT_START + (DS_SLOT_MAX * DRAGON_SOUL_DECK_MAX_NUM),
	DRAGON_SOUL_EQUIP_RESERVED_SLOT_END = DRAGON_SOUL_EQUIP_SLOT_END + (DS_SLOT_MAX * DRAGON_SOUL_DECK_RESERVED_MAX_NUM),

	BELT_INVENTORY_SLOT_START = DRAGON_SOUL_EQUIP_RESERVED_SLOT_END,
	BELT_INVENTORY_SLOT_END = BELT_INVENTORY_SLOT_START + BELT_INVENTORY_SLOT_COUNT,

	INVENTORY_AND_EQUIP_SLOT_MAX = BELT_INVENTORY_SLOT_END,
};

#pragma pack(push, 1)

typedef struct SItemPos
{
	BYTE window_type;
	WORD cell;
    SItemPos ()
    {
        window_type = INVENTORY;
		cell = WORD_MAX;
    }

	SItemPos (BYTE _window_type, WORD _cell)
    {
        window_type = _window_type;
        cell = _cell;
    }

	bool IsValidItemPosition() const
	{
		switch (window_type)
		{
		case RESERVED_WINDOW:
			return false;
		case INVENTORY:
		case EQUIPMENT:
		case BELT_INVENTORY:
			return cell < INVENTORY_AND_EQUIP_SLOT_MAX;
		case DRAGON_SOUL_INVENTORY:
			return cell < (DRAGON_SOUL_INVENTORY_MAX_NUM);
#ifdef __NEW_STORAGE__
		case UPGRADE_INVENTORY:
		case BOOK_INVENTORY:
		case STONE_INVENTORY:
		case ATTR_INVENTORY:
		case GIFTBOX_INVENTORY:
			return cell < (STORAGE_INVENTORY_MAX_NUM);
#endif
		case SAFEBOX:
		case MALL:
			return false;
		default:
			return false;
		}
		return false;
	}

	bool IsEquipPosition() const
	{
		return ((INVENTORY == window_type || EQUIPMENT == window_type) && cell >= INVENTORY_MAX_NUM && cell < INVENTORY_MAX_NUM + WEAR_MAX_NUM)
			|| IsDragonSoulEquipPosition();
	}

	bool IsDragonSoulEquipPosition() const
	{
		return (DRAGON_SOUL_EQUIP_SLOT_START <= cell) && (DRAGON_SOUL_EQUIP_SLOT_END > cell);
	}

	bool IsBeltInventoryPosition() const
	{
		return (BELT_INVENTORY_SLOT_START <= cell) && (BELT_INVENTORY_SLOT_END > cell);
	}

	bool IsDefaultInventoryPosition() const
	{
		return INVENTORY == window_type && cell < INVENTORY_MAX_NUM;
	}

#ifdef __NEW_STORAGE__
	bool IsUpgradeInventoryPosition() const
	{
		return UPGRADE_INVENTORY == window_type && cell < STORAGE_INVENTORY_MAX_NUM;
	}
	bool IsBookInventoryPosition() const
	{
		return BOOK_INVENTORY == window_type && cell < STORAGE_INVENTORY_MAX_NUM;
	}
	bool IsStoneInventoryPosition() const
	{
		return STONE_INVENTORY == window_type && cell < STORAGE_INVENTORY_MAX_NUM;
	}
	bool IsAttrInventoryPosition() const
	{
		return ATTR_INVENTORY == window_type && cell < STORAGE_INVENTORY_MAX_NUM;
	}
	bool IsGiftBoxInventoryPosition() const
	{
		return GIFTBOX_INVENTORY == window_type && cell < STORAGE_INVENTORY_MAX_NUM;
	}
#endif

	bool operator==(const struct SItemPos& rhs) const
	{
		return (window_type == rhs.window_type) && (cell == rhs.cell);
	}
	bool operator<(const struct SItemPos& rhs) const
	{
		return (window_type < rhs.window_type) || ((window_type == rhs.window_type) && (cell < rhs.cell));
	}
} TItemPos;

const TItemPos NPOS (RESERVED_WINDOW, WORD_MAX);

#pragma pack(pop)

#endif

